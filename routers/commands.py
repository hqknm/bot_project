from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from keyboards.inline import main_menu
from filters.command_filter import IsCommand
from aiogram.filters import Command
from services.api_client import CoinGeckoAPI
from services.storage import Storage
from keyboards.builders import KeyboardBuilder
import time
router = Router()
api = CoinGeckoAPI()
storage = Storage()

@router.message(IsCommand())
async def unknown_command(message: Message):
    await message.answer(
        "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/list - –¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "/favorites - –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
    )

@router.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Tracker Bot!\n"
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
        reply_markup=main_menu()
    )

@router.message(F.text == "/help")
async def cmd_help(message: Message):
    await message.answer(
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/list - –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "/price [–∫–æ–¥] - –¶–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: /price bitcoin)\n"
        "/favorites - –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã\n"
        "/chart [–∫–æ–¥] - –ì—Ä–∞—Ñ–∏–∫ –∑–∞ 7 –¥–Ω–µ–π"
    )

@router.message(Command("list"))
async def cmd_list(message: Message):
    coins = await api.get_top_cryptos(limit=10)
    message_text = "üèÜ –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n" + "\n".join(
        f"{idx + 1}. {coin['name']} ({coin['symbol'].upper()}) - ${coin['current_price']:,}"
        for idx, coin in enumerate(coins)
    )
    keyboard = KeyboardBuilder().top_coins_keyboard(coins).as_markup()
    await message.answer(message_text, reply_markup=keyboard)


@router.message(Command("price"))
async def cmd_price(message: Message):
    args = message.text.split()
    if len(args) < 2:
        return await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /price <–∫–æ–¥_–≤–∞–ª—é—Ç—ã>")

    crypto_id = args[1].lower()
    crypto_data = await api.get_crypto_data(crypto_id)
    price = crypto_data['market_data']['current_price']['usd']
    await message.answer(f"üíµ {crypto_data['name']}: ${price:,.2f}")


@router.message(Command("favorites"))
async def cmd_favorites(message: Message):
    favorites = storage.get_favorites(message.from_user.id)
    if not favorites:
        return await message.answer("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ")

    timestamp = int(time.time())
    text = f"‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}):"

    keyboard = KeyboardBuilder().favorites_keyboard(favorites).as_markup()

    await message.answer(
        text,
        reply_markup=keyboard
    )


@router.message(Command("chart"))
async def cmd_chart(message: Message):
    args = message.text.split()
    if len(args) < 2:
        return await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /chart <–∫–æ–¥_–≤–∞–ª—é—Ç—ã>")

    crypto_id = args[1].lower()
    await message.answer(f"üìä –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è {crypto_id} (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        text="üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu()
    )