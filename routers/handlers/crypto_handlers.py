from aiogram import Router, F
from aiogram.types import CallbackQuery
from services.api_client import CoinGeckoAPI
from keyboards.builders import KeyboardBuilder
from keyboards.inline import main_menu
from utils.logger import setup_logger
from services.storage import Storage
from aiogram.exceptions import TelegramBadRequest
import time


logger = setup_logger(__name__)


router = Router(name="crypto_router")

api = CoinGeckoAPI()
storage = Storage()


@router.callback_query(F.data.startswith("fav_"))
async def toggle_favorite(callback: CallbackQuery):
    try:
        crypto_id = callback.data.split("_")[1]
        user_id = callback.from_user.id

        was_favorite = storage.is_favorite(user_id, crypto_id)

        if was_favorite:
            storage.remove_favorite(user_id, crypto_id)
            await callback.answer("‚ùå –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        else:
            storage.add_favorite(user_id, crypto_id)
            await callback.answer("‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        storage.refresh_data()


        is_favorite = storage.is_favorite(user_id, crypto_id)
        crypto_data = await api.get_crypto_data(crypto_id)
        price = crypto_data['market_data']['current_price']['usd']
        change_24h = crypto_data['market_data']['price_change_percentage_24h']
        timestamp = int(time.time())
        message_text = (
            f"üìä <b>{crypto_data['name']} ({crypto_data['symbol'].upper()})</b>\n\n"
            f"üíµ <b>–¶–µ–Ω–∞:</b> ${price:,.2f}\n"
            f"üìà <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á):</b> {change_24h:.2f}%\n"
            f"üè∑Ô∏è <b>–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${crypto_data['market_data']['market_cap']['usd']:,}"
            f"\n\nüîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º' if is_favorite else '‚ùå –ù–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º'}"
            f"\n‚åö {timestamp}"
        )

        keyboard = KeyboardBuilder().crypto_detail_buttons(
            crypto_id=crypto_id,
            is_favorite=is_favorite
        ).as_markup()

        try:
            # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback.message.edit_text(
                text=message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except TelegramBadRequest:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback.message.edit_reply_markup(reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error in toggle_favorite: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data == "top_crypto")
async def show_top_crypto(callback: CallbackQuery):
    try:
        if not api:
            await callback.answer("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return

        coins = await api.get_top_cryptos(limit=10)

        if not coins:
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        message_text = "üèÜ –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n" + "\n".join(
            f"{idx + 1}. {coin['name']} ({coin['symbol'].upper()}) - ${coin['current_price']:,}"
            for idx, coin in enumerate(coins)
        )

        keyboard = KeyboardBuilder().top_coins_keyboard(coins).as_markup()
        await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard
        )
        logger.info(f"User {callback.from_user.id} requested top crypto")

    except Exception as e:
        logger.error(f"Error in show_top_crypto: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data.startswith("crypto_"))
async def show_crypto_detail(callback: CallbackQuery):
    try:
        if not api:
            await callback.answer("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return

        crypto_id = callback.data.split("_")[1]
        is_favorite = storage.is_favorite(callback.from_user.id, crypto_id)

        crypto_data = await api.get_crypto_data(crypto_id)
        if not crypto_data:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        price = crypto_data['market_data']['current_price']['usd']
        change_24h = crypto_data['market_data']['price_change_percentage_24h']

        message_text = (
            f"üìä <b>{crypto_data['name']} ({crypto_data['symbol'].upper()})</b>\n\n"
            f"üíµ <b>–¶–µ–Ω–∞:</b> ${price:,.2f}\n"
            f"üìà <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á):</b> {change_24h:.2f}%\n"
            f"üè∑Ô∏è <b>–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${crypto_data['market_data']['market_cap']['usd']:,}"
        )

        keyboard = KeyboardBuilder().crypto_detail_buttons(
            crypto_id=crypto_id,
            is_favorite=is_favorite
        ).as_markup()

        await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logger.info(f"User {callback.from_user.id} viewed {crypto_id}")

    except Exception as e:
        logger.error(f"Error in show_crypto_detail: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data.startswith("chart_"))
async def show_crypto_chart(callback: CallbackQuery):
    try:
        if not api:
            await callback.answer("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return

        _, crypto_id, period = callback.data.split("_")
        chart_data = await api.get_crypto_chart(crypto_id, period)

        if not chart_data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞", show_alert=True)
            return

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞:
        await callback.message.answer(
            f"üìä –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è {crypto_id.upper()} –∑–∞ {period} –¥–Ω–µ–π\n"
            f"(—Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π)"
        )
        logger.info(f"User {callback.from_user.id} viewed chart for {crypto_id}")

    except Exception as e:
        logger.error(f"Error in show_crypto_chart: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞", show_alert=True)


@router.callback_query(F.data == "main_menu")
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu()
    )
__all__ = ['router']